[{"title":"tinyDVR 开发日记","path":"/2021/12/08/tinyDVR-开发日记/","content":"研一修了《科学计算可视化算法》这门课，期间完成了一个简单的基于光线投射算法的直接体绘制程序。但是没有交互界面，没有文件系统，缺少很多东西，希望能在后续追加功能，把它做成一个方便使用的小工具，麻雀虽小，五脏俱全嘛。 开发环境 IDE VS 2019 依赖 LOG: spdlog UI: ImGui Render: OpenGL (GLFW + GLAD) Data Format Current: DAT file + raw (uniform grid only) Future: others (To be implemented) 定位这个工作是为了实现一个易于交互、界面友好的直接体绘制工具。同时提供 API 方便研究者快速实现一些体绘制算法，用于验证。目前已经有了渲染部分的雏形，但是仍旧有许多不足。 代码框架框架目前参考开源游戏引擎 Hazel 的代码结构，整个系统依赖于简易渲染引擎 DVR.Render 在窗口中渲染体绘制结果，后续会添加其他的部分，包括交互、文件系统等。（这里需要补充图片） 后续工作这里会列出后续的计划和当前阶段性工作的实现状况（不定期更新），记法如下： 斜体表示后续待改进的工作 粗体表示正在进行的工作 正体表示已经稳定，不会有大的改动的工作。 Version 0.1.0 简单渲染引擎 简单 GUI 重构(0%)","tags":["C++","Direct Volume Rendering","Scientific Visualization","Computer Graphics"]},{"title":"论文撰写修改体悟","path":"/2021/08/18/论文撰写修改体悟/","content":"24号自武汉参加 ChinaVis 返京就一直在修改第一篇文章。能不能接受就看造化了。希望能有所回报吧 心得体会撰写文章的三个重要目标（指导方向） 不要让读者（审稿人）猜、总结你想要表达的观点和内容 不要让读者（审稿人）找你要提及的内容（段落、图片、表格等）在哪里 逻辑连贯、语句通顺、段落承接、连接词 信息填写、排版按要求 大概就是这四条，另外记得用版本管理软件（.git等）进行版本管理。尝试使用Word的审阅记录对文档的修改。最后，勤问老师，就算挨骂也要问明白。 就酱。","tags":["Paper Writing","Experience"]},{"title":"我的 CMAKE 入门","path":"/2021/05/27/我的-CMAKE-入门/","content":"尝试 CMake 入门。之前跟着 TheCherno 大佬的游戏引擎视频教程 最好的游戏引擎开发教学没意见吧！（repo）尝试使用 premake 构建工程，但是考虑到大多数的开源项目都是用 CMake 进行管理的，还是决定要学习一下 CMake。在这里会记录一下常用的 CMake，同时也作为我的第一篇正式博客贴出。 说明学习内容参考（这一段内容作废，万物靠百度，万事靠自学）cmake-examples-Chinese，对应的代码 cmake-examples。 除非特殊说明，所有的 CMake 项目构建过程按如下方式进行： mkdir buildcd buildcmake .. Windows 下（如果安装了VS）默认生成 VS 的 .sln 工程项目，Linux 下可以直接在 build 文件夹中执行 make 编译代码生成可执行文件。 2021.5.27基本信息对于只包含一个源文件 main.cpp 的简单项目，只需要在项目文件夹下创建 CMakeLists.txt 并写入基本信息： cmake_minimum_required(VERSION 3.5) #设置CMake最小版本project (hello_cmake) #设置工程名add_executable(hello_cmake main.cpp) #生成可执行文件 cmake_minimum_required 版本要求需要查看 API 文档，像添加预编译头文件（pch.h）的功能 target_precompile_headers 的功能在版本 3.16 之后添加。 project 同时定义了以下的常量： $PROJECT_NAME # 就是 hello_cmake add_executable 中第一个参数就是解决方案中唯一一个（暂时）项目的名字。 项目设置 project 项目名后可以添加性质（trait） 版本就是 VERSION X.X.X 描述就是 DESCRIPTION XXX 语言就是 LANGUAGES CXX 使用 set 可以设置常量和修改预置量，如 设置常量 set(INCLUDE_DIR include/) = $INCLUDE_DIR 等价 include 修改预置量 set(CMAKE_CXX_STANDARD 17) 指定 C++ 语言版本为 C++17 set(CMAKE_CXX_STANDARD_REQUIRED ON/OFF) 是否允许低版本语言编译 set(CMAKE_CXX_EXTENSIONS ON/OFF) 不懂干嘛的，之后懂了可能会补上 使用 target_include_directories(name PUBLIC|PRIVATE|INTERFACE dir) 向项目 name 添加位于 dir 下的头文件，有三种访问方式： PUBLIC: name 中的头文件和源文件都包含了 dir 的头文件，main.cpp 也需要包含 dir 下的头文件 PRIVATE: name 中只有源文件包含了 dir 的头文件，main.cpp 对 dir 的头文件未知（无法 include） INTERFACE: name 中只有头文件包含了 dir 的头文件，main.cpp 需要包含 dir 下的头文件 2021.8.18久违的更新 文件包含 添加辅助源文件目录 aux_source_directory(path target) 得到的 target 用于命令 add_executable 和 add_library 中，最终会把 path 下的所有源文件添加到项目的源文件管理器中。 同名文件搜索 如果要添加目录 path 下所有某后缀 *.xx 的文件，则可以 file(GLOB_RECURSE target *.xx)source_group(name FILES path) 这样 path 下所有的 *.xx 文件路径都被添加到了 target 中，在 add_executable 和 add_library 中添加对应条目即可在最终生成的项目中看到同名文件夹和对应的文件。 子目录、子工程add_subdirectory(path) 是将 path 下的子项目包含进编译工程中，但是要求 path 下必须有描述子项目的 CMAKE 文件 CMakeLists.txt； 多个子项目之间的连接依赖关系可以通过命令 target_link_libraries(target [PUBLIC|PRIVATE|INTERFACE] dependency1 [PUBLIC|PRIVATE|INTERFACE] dependency2 ...) 完成，且不要求子目录 CMakeLists.txt 令添加依赖子项目目录，只需要在根目录的 CMakeLists.txt 中添加了所有子项目目录即可。该命令的依赖关系指标参数[PUBLIC|PRIVATE|INTERFACE]和 target_include_directories 相同。 target_include_directories(target [PUBLIC|PRIVATE|INTERFACE] path1 [PUBLIC|PRIVATE|INTERFACE] path2 ...) 向 target 添加包含头文件，参数与 target_include_directories 相同。 目标文件目录对于目标为可执行文件的目标，可以指定可执行文件生成目录为 set(CMAKE_RUNTIME_OUTPUT_DIRECTORY path) 对于目标为静态库的目标，可以指定静态库生成目录为 set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY path) 对于目标为动态库的目标，可以指定动态库生成目录为set(CMAKE_BINARY_OUTPUT_DIRECTORY path) 注意，修改目标文件目录的操作必须在 add_executable 和 add_library 之前！ 今天就这些了。","tags":["C++","CMAKE"]},{"title":"blog in 2021","path":"/2021/05/27/blog-in-2021/","content":"2021 重新出发我的博客无了，只能开个新的了。虽然之前在本科写了好多，但是其实都是些乱七八糟没啥意义的代码分享（贝塞尔曲线那个不算）。现在重新安装了 hexo，只能重新开始了，发发牢骚。 虽然我也不想这样，但是没有办法，公式插件啥的都得重新弄 烦死了 $E = mc^2$"},{"title":"Hello World","path":"/2021/05/27/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new My New Post More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment"}]